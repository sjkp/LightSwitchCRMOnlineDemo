//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class sjkpdev07ContextDataDataService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataService<global::LightSwitchApplication.Implementation.sjkpdev07ContextData>
    {
    
        public sjkpdev07ContextDataDataService() : base()
        {
        }
    
        protected override global::Microsoft.LightSwitch.IDataService GetDataService(global::Microsoft.LightSwitch.IDataWorkspace dataWorkspace)
        {
            return ((global::LightSwitchApplication.DataWorkspace)dataWorkspace).sjkpdev07ContextData;
        }
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class sjkpdev07ContextDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.AstoriaDataServiceImplementation<global::LightSwitchApplication.Implementation.sjkpdev07ContextData, global::sjkpdev07ContextData.sjkpdev07ContextDataService.sjkpdev07Context>
    {
        public sjkpdev07ContextDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::LightSwitchApplication.Implementation.Account))
            {
                return new global::LightSwitchApplication.Implementation.Account();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::LightSwitchApplication.Implementation.sjkpdev07ContextData CreateObjectContext()
        {
            string assemblyName = global::System.Reflection.Assembly.GetExecutingAssembly().GetName().Name;
            return new global::LightSwitchApplication.Implementation.sjkpdev07ContextData(this.GetEntityConnectionString(
                "sjkpdev07ContextData",
                "res://" + assemblyName + "/sjkpdev07ContextData.csdl|res://" + assemblyName + "/sjkpdev07ContextData.ssdl|res://" + assemblyName + "/sjkpdev07ContextData.msl",
                "System.Data.SqlClient",
                true));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.Account))
            {
                return new global::LightSwitchApplication.Implementation.Account();
            }
            return null;
        }
    
        protected override string WebConfigurationConnectionStringName
        {
            get
            {
                return "sjkpdev07ContextData";
            }
        }
    
        protected override global::System.Type ConvertType(global::System.Type outerType)
        {
            if (outerType == typeof(global::LightSwitchApplication.Implementation.Account))
            {
                return typeof(global::sjkpdev07ContextData.sjkpdev07ContextDataService.Account);
            }
            return base.ConvertType(outerType);
        }
    
    
        protected override global::System.String ConvertProperty(global::System.Reflection.PropertyInfo outerProperty)
        {
            if (outerProperty.DeclaringType == typeof(global::LightSwitchApplication.Implementation.Account))
            {
                switch(outerProperty.Name)
                {
                    case "TerritoryCode_Value":
                        return "TerritoryCode.Value";
                    case "OwnershipCode_Value":
                        return "OwnershipCode.Value";
                    case "PrimaryContactId_Id":
                        return "PrimaryContactId.Id";
                    case "PrimaryContactId_LogicalName":
                        return "PrimaryContactId.LogicalName";
                    case "PrimaryContactId_Name":
                        return "PrimaryContactId.Name";
                    case "CreditLimit_Value":
                        return "CreditLimit.Value";
                    case "TerritoryId_Id":
                        return "TerritoryId.Id";
                    case "TerritoryId_LogicalName":
                        return "TerritoryId.LogicalName";
                    case "TerritoryId_Name":
                        return "TerritoryId.Name";
                    case "Address1_FreightTermsCode_Value":
                        return "Address1_FreightTermsCode.Value";
                    case "OwningTeam_Id":
                        return "OwningTeam.Id";
                    case "OwningTeam_LogicalName":
                        return "OwningTeam.LogicalName";
                    case "OwningTeam_Name":
                        return "OwningTeam.Name";
                    case "ShippingMethodCode_Value":
                        return "ShippingMethodCode.Value";
                    case "OwningBusinessUnit_Id":
                        return "OwningBusinessUnit.Id";
                    case "OwningBusinessUnit_LogicalName":
                        return "OwningBusinessUnit.LogicalName";
                    case "OwningBusinessUnit_Name":
                        return "OwningBusinessUnit.Name";
                    case "OwnerId_Id":
                        return "OwnerId.Id";
                    case "OwnerId_LogicalName":
                        return "OwnerId.LogicalName";
                    case "OwnerId_Name":
                        return "OwnerId.Name";
                    case "CreatedOnBehalfBy_Id":
                        return "CreatedOnBehalfBy.Id";
                    case "CreatedOnBehalfBy_LogicalName":
                        return "CreatedOnBehalfBy.LogicalName";
                    case "CreatedOnBehalfBy_Name":
                        return "CreatedOnBehalfBy.Name";
                    case "PreferredContactMethodCode_Value":
                        return "PreferredContactMethodCode.Value";
                    case "Aging90_Base_Value":
                        return "Aging90_Base.Value";
                    case "PaymentTermsCode_Value":
                        return "PaymentTermsCode.Value";
                    case "Aging30_Value":
                        return "Aging30.Value";
                    case "Revenue_Value":
                        return "Revenue.Value";
                    case "TransactionCurrencyId_Id":
                        return "TransactionCurrencyId.Id";
                    case "TransactionCurrencyId_LogicalName":
                        return "TransactionCurrencyId.LogicalName";
                    case "TransactionCurrencyId_Name":
                        return "TransactionCurrencyId.Name";
                    case "Address1_ShippingMethodCode_Value":
                        return "Address1_ShippingMethodCode.Value";
                    case "OwningUser_Id":
                        return "OwningUser.Id";
                    case "OwningUser_LogicalName":
                        return "OwningUser.LogicalName";
                    case "OwningUser_Name":
                        return "OwningUser.Name";
                    case "CreditLimit_Base_Value":
                        return "CreditLimit_Base.Value";
                    case "PreferredSystemUserId_Id":
                        return "PreferredSystemUserId.Id";
                    case "PreferredSystemUserId_LogicalName":
                        return "PreferredSystemUserId.LogicalName";
                    case "PreferredSystemUserId_Name":
                        return "PreferredSystemUserId.Name";
                    case "MarketCap_Value":
                        return "MarketCap.Value";
                    case "AccountCategoryCode_Value":
                        return "AccountCategoryCode.Value";
                    case "StateCode_Value":
                        return "StateCode.Value";
                    case "Address2_AddressTypeCode_Value":
                        return "Address2_AddressTypeCode.Value";
                    case "DefaultPriceLevelId_Id":
                        return "DefaultPriceLevelId.Id";
                    case "DefaultPriceLevelId_LogicalName":
                        return "DefaultPriceLevelId.LogicalName";
                    case "DefaultPriceLevelId_Name":
                        return "DefaultPriceLevelId.Name";
                    case "CustomerSizeCode_Value":
                        return "CustomerSizeCode.Value";
                    case "PreferredServiceId_Id":
                        return "PreferredServiceId.Id";
                    case "PreferredServiceId_LogicalName":
                        return "PreferredServiceId.LogicalName";
                    case "PreferredServiceId_Name":
                        return "PreferredServiceId.Name";
                    case "Aging60_Value":
                        return "Aging60.Value";
                    case "CustomerTypeCode_Value":
                        return "CustomerTypeCode.Value";
                    case "CreatedBy_Id":
                        return "CreatedBy.Id";
                    case "CreatedBy_LogicalName":
                        return "CreatedBy.LogicalName";
                    case "CreatedBy_Name":
                        return "CreatedBy.Name";
                    case "ModifiedBy_Id":
                        return "ModifiedBy.Id";
                    case "ModifiedBy_LogicalName":
                        return "ModifiedBy.LogicalName";
                    case "ModifiedBy_Name":
                        return "ModifiedBy.Name";
                    case "Aging30_Base_Value":
                        return "Aging30_Base.Value";
                    case "Address2_FreightTermsCode_Value":
                        return "Address2_FreightTermsCode.Value";
                    case "AccountRatingCode_Value":
                        return "AccountRatingCode.Value";
                    case "OriginatingLeadId_Id":
                        return "OriginatingLeadId.Id";
                    case "OriginatingLeadId_LogicalName":
                        return "OriginatingLeadId.LogicalName";
                    case "OriginatingLeadId_Name":
                        return "OriginatingLeadId.Name";
                    case "Address2_ShippingMethodCode_Value":
                        return "Address2_ShippingMethodCode.Value";
                    case "Revenue_Base_Value":
                        return "Revenue_Base.Value";
                    case "AccountClassificationCode_Value":
                        return "AccountClassificationCode.Value";
                    case "PreferredEquipmentId_Id":
                        return "PreferredEquipmentId.Id";
                    case "PreferredEquipmentId_LogicalName":
                        return "PreferredEquipmentId.LogicalName";
                    case "PreferredEquipmentId_Name":
                        return "PreferredEquipmentId.Name";
                    case "MarketCap_Base_Value":
                        return "MarketCap_Base.Value";
                    case "Address1_AddressTypeCode_Value":
                        return "Address1_AddressTypeCode.Value";
                    case "ParentAccountId_Id":
                        return "ParentAccountId.Id";
                    case "ParentAccountId_LogicalName":
                        return "ParentAccountId.LogicalName";
                    case "ParentAccountId_Name":
                        return "ParentAccountId.Name";
                    case "BusinessTypeCode_Value":
                        return "BusinessTypeCode.Value";
                    case "Aging60_Base_Value":
                        return "Aging60_Base.Value";
                    case "ModifiedOnBehalfBy_Id":
                        return "ModifiedOnBehalfBy.Id";
                    case "ModifiedOnBehalfBy_LogicalName":
                        return "ModifiedOnBehalfBy.LogicalName";
                    case "ModifiedOnBehalfBy_Name":
                        return "ModifiedOnBehalfBy.Name";
                    case "MasterId_Id":
                        return "MasterId.Id";
                    case "MasterId_LogicalName":
                        return "MasterId.LogicalName";
                    case "MasterId_Name":
                        return "MasterId.Name";
                    case "Aging90_Value":
                        return "Aging90.Value";
                    case "StatusCode_Value":
                        return "StatusCode.Value";
                    case "PreferredAppointmentDayCode_Value":
                        return "PreferredAppointmentDayCode.Value";
                    case "PreferredAppointmentTimeCode_Value":
                        return "PreferredAppointmentTimeCode.Value";
                    case "IndustryCode_Value":
                        return "IndustryCode.Value";
                }
            }
            return base.ConvertProperty(outerProperty);
        }
    
        protected override object ConvertEntity(object outerEntity)
        {
            global::LightSwitchApplication.Implementation.Account account = outerEntity as global::LightSwitchApplication.Implementation.Account;
            if (account != null)
            {
                global::sjkpdev07ContextData.sjkpdev07ContextDataService.Account result = new global::sjkpdev07ContextData.sjkpdev07ContextDataService.Account();
                result.TerritoryCode.Value = account.TerritoryCode_Value;
                result.LastUsedInCampaign = account.LastUsedInCampaign;
                result.Address1_Name = account.Address1_Name;
                result.Address1_Telephone2 = account.Address1_Telephone2;
                result.OverriddenCreatedOn = account.OverriddenCreatedOn;
                result.EntityImageId = account.EntityImageId;
                result.OwnershipCode.Value = account.OwnershipCode_Value;
                result.PrimaryContactId.Id = account.PrimaryContactId_Id;
                result.PrimaryContactId.LogicalName = account.PrimaryContactId_LogicalName;
                result.PrimaryContactId.Name = account.PrimaryContactId_Name;
                result.CreditLimit.Value = account.CreditLimit_Value;
                result.EntityImage_URL = account.EntityImage_URL;
                result.TerritoryId.Id = account.TerritoryId_Id;
                result.TerritoryId.LogicalName = account.TerritoryId_LogicalName;
                result.TerritoryId.Name = account.TerritoryId_Name;
                result.EntityImage_Timestamp = account.EntityImage_Timestamp;
                result.Telephone3 = account.Telephone3;
                result.DoNotBulkPostalMail = account.DoNotBulkPostalMail;
                result.Address1_FreightTermsCode.Value = account.Address1_FreightTermsCode_Value;
                result.Address2_Line1 = account.Address2_Line1;
                result.EMailAddress2 = account.EMailAddress2;
                result.Address2_PrimaryContactName = account.Address2_PrimaryContactName;
                result.Telephone2 = account.Telephone2;
                result.TimeZoneRuleVersionNumber = account.TimeZoneRuleVersionNumber;
                result.OwningTeam.Id = account.OwningTeam_Id;
                result.OwningTeam.LogicalName = account.OwningTeam_LogicalName;
                result.OwningTeam.Name = account.OwningTeam_Name;
                result.ShippingMethodCode.Value = account.ShippingMethodCode_Value;
                result.Address1_AddressId = account.Address1_AddressId;
                result.Address2_Telephone1 = account.Address2_Telephone1;
                result.Address1_Fax = account.Address1_Fax;
                result.OwningBusinessUnit.Id = account.OwningBusinessUnit_Id;
                result.OwningBusinessUnit.LogicalName = account.OwningBusinessUnit_LogicalName;
                result.OwningBusinessUnit.Name = account.OwningBusinessUnit_Name;
                result.OwnerId.Id = account.OwnerId_Id;
                result.OwnerId.LogicalName = account.OwnerId_LogicalName;
                result.OwnerId.Name = account.OwnerId_Name;
                result.CreatedOnBehalfBy.Id = account.CreatedOnBehalfBy_Id;
                result.CreatedOnBehalfBy.LogicalName = account.CreatedOnBehalfBy_LogicalName;
                result.CreatedOnBehalfBy.Name = account.CreatedOnBehalfBy_Name;
                result.Address2_Latitude = account.Address2_Latitude;
                result.PreferredContactMethodCode.Value = account.PreferredContactMethodCode_Value;
                result.Address2_Composite = account.Address2_Composite;
                result.Aging90_Base.Value = account.Aging90_Base_Value;
                result.Address2_PostalCode = account.Address2_PostalCode;
                result.Merged = account.Merged;
                result.PaymentTermsCode.Value = account.PaymentTermsCode_Value;
                result.DoNotSendMM = account.DoNotSendMM;
                result.Address2_County = account.Address2_County;
                result.Aging30.Value = account.Aging30_Value;
                result.Address2_City = account.Address2_City;
                result.DoNotBulkEMail = account.DoNotBulkEMail;
                result.ImportSequenceNumber = account.ImportSequenceNumber;
                result.EMailAddress3 = account.EMailAddress3;
                result.Address1_City = account.Address1_City;
                result.WebSiteURL = account.WebSiteURL;
                result.Revenue.Value = account.Revenue_Value;
                result.TransactionCurrencyId.Id = account.TransactionCurrencyId_Id;
                result.TransactionCurrencyId.LogicalName = account.TransactionCurrencyId_LogicalName;
                result.TransactionCurrencyId.Name = account.TransactionCurrencyId_Name;
                result.Address1_ShippingMethodCode.Value = account.Address1_ShippingMethodCode_Value;
                result.Address1_PostOfficeBox = account.Address1_PostOfficeBox;
                result.Description = account.Description;
                result.TickerSymbol = account.TickerSymbol;
                result.Address2_Longitude = account.Address2_Longitude;
                result.SIC = account.SIC;
                result.Address1_County = account.Address1_County;
                result.OwningUser.Id = account.OwningUser_Id;
                result.OwningUser.LogicalName = account.OwningUser_LogicalName;
                result.OwningUser.Name = account.OwningUser_Name;
                result.Address2_AddressId = account.Address2_AddressId;
                result.CreditLimit_Base.Value = account.CreditLimit_Base_Value;
                result.PreferredSystemUserId.Id = account.PreferredSystemUserId_Id;
                result.PreferredSystemUserId.LogicalName = account.PreferredSystemUserId_LogicalName;
                result.PreferredSystemUserId.Name = account.PreferredSystemUserId_Name;
                result.MarketCap.Value = account.MarketCap_Value;
                result.Address1_PrimaryContactName = account.Address1_PrimaryContactName;
                result.DoNotPostalMail = account.DoNotPostalMail;
                result.AccountCategoryCode.Value = account.AccountCategoryCode_Value;
                result.StateCode.Value = account.StateCode_Value;
                result.Address2_Telephone3 = account.Address2_Telephone3;
                result.Address2_AddressTypeCode.Value = account.Address2_AddressTypeCode_Value;
                result.EntityImage = account.EntityImage;
                result.DoNotFax = account.DoNotFax;
                result.DefaultPriceLevelId.Id = account.DefaultPriceLevelId_Id;
                result.DefaultPriceLevelId.LogicalName = account.DefaultPriceLevelId_LogicalName;
                result.DefaultPriceLevelId.Name = account.DefaultPriceLevelId_Name;
                result.ParticipatesInWorkflow = account.ParticipatesInWorkflow;
                result.CustomerSizeCode.Value = account.CustomerSizeCode_Value;
                result.Address2_UPSZone = account.Address2_UPSZone;
                result.PreferredServiceId.Id = account.PreferredServiceId_Id;
                result.PreferredServiceId.LogicalName = account.PreferredServiceId_LogicalName;
                result.PreferredServiceId.Name = account.PreferredServiceId_Name;
                result.UTCConversionTimeZoneCode = account.UTCConversionTimeZoneCode;
                result.DoNotEMail = account.DoNotEMail;
                result.Aging60.Value = account.Aging60_Value;
                result.CustomerTypeCode.Value = account.CustomerTypeCode_Value;
                result.Telephone1 = account.Telephone1;
                result.CreatedBy.Id = account.CreatedBy_Id;
                result.CreatedBy.LogicalName = account.CreatedBy_LogicalName;
                result.CreatedBy.Name = account.CreatedBy_Name;
                result.Address2_Name = account.Address2_Name;
                result.ModifiedBy.Id = account.ModifiedBy_Id;
                result.ModifiedBy.LogicalName = account.ModifiedBy_LogicalName;
                result.ModifiedBy.Name = account.ModifiedBy_Name;
                result.Aging30_Base.Value = account.Aging30_Base_Value;
                result.YomiName = account.YomiName;
                result.Address2_Country = account.Address2_Country;
                result.Address2_Fax = account.Address2_Fax;
                result.Address1_UPSZone = account.Address1_UPSZone;
                result.Address1_PostalCode = account.Address1_PostalCode;
                result.Address1_Country = account.Address1_Country;
                result.NumberOfEmployees = account.NumberOfEmployees;
                result.Address2_FreightTermsCode.Value = account.Address2_FreightTermsCode_Value;
                result.AccountRatingCode.Value = account.AccountRatingCode_Value;
                result.FtpSiteURL = account.FtpSiteURL;
                result.Address1_Longitude = account.Address1_Longitude;
                result.AccountId = account.AccountId;
                result.OriginatingLeadId.Id = account.OriginatingLeadId_Id;
                result.OriginatingLeadId.LogicalName = account.OriginatingLeadId_LogicalName;
                result.OriginatingLeadId.Name = account.OriginatingLeadId_Name;
                result.Fax = account.Fax;
                result.CreditOnHold = account.CreditOnHold;
                result.Address1_Telephone1 = account.Address1_Telephone1;
                result.CreatedOn = account.CreatedOn;
                result.Name = account.Name;
                result.ExchangeRate = account.ExchangeRate;
                result.Address2_ShippingMethodCode.Value = account.Address2_ShippingMethodCode_Value;
                result.Address2_Line2 = account.Address2_Line2;
                result.VersionNumber = account.VersionNumber;
                result.AccountNumber = account.AccountNumber;
                result.Address1_Line1 = account.Address1_Line1;
                result.Revenue_Base.Value = account.Revenue_Base_Value;
                result.DoNotPhone = account.DoNotPhone;
                result.AccountClassificationCode.Value = account.AccountClassificationCode_Value;
                result.PreferredEquipmentId.Id = account.PreferredEquipmentId_Id;
                result.PreferredEquipmentId.LogicalName = account.PreferredEquipmentId_LogicalName;
                result.PreferredEquipmentId.Name = account.PreferredEquipmentId_Name;
                result.MarketCap_Base.Value = account.MarketCap_Base_Value;
                result.StageId = account.StageId;
                result.ProcessId = account.ProcessId;
                result.Address2_Telephone2 = account.Address2_Telephone2;
                result.Address1_AddressTypeCode.Value = account.Address1_AddressTypeCode_Value;
                result.Address1_UTCOffset = account.Address1_UTCOffset;
                result.ParentAccountId.Id = account.ParentAccountId_Id;
                result.ParentAccountId.LogicalName = account.ParentAccountId_LogicalName;
                result.ParentAccountId.Name = account.ParentAccountId_Name;
                result.Address1_Line2 = account.Address1_Line2;
                result.BusinessTypeCode.Value = account.BusinessTypeCode_Value;
                result.Aging60_Base.Value = account.Aging60_Base_Value;
                result.ModifiedOnBehalfBy.Id = account.ModifiedOnBehalfBy_Id;
                result.ModifiedOnBehalfBy.LogicalName = account.ModifiedOnBehalfBy_LogicalName;
                result.ModifiedOnBehalfBy.Name = account.ModifiedOnBehalfBy_Name;
                result.StockExchange = account.StockExchange;
                result.Address1_Line3 = account.Address1_Line3;
                result.MasterId.Id = account.MasterId_Id;
                result.MasterId.LogicalName = account.MasterId_LogicalName;
                result.MasterId.Name = account.MasterId_Name;
                result.Aging90.Value = account.Aging90_Value;
                result.StatusCode.Value = account.StatusCode_Value;
                result.Address2_PostOfficeBox = account.Address2_PostOfficeBox;
                result.SharesOutstanding = account.SharesOutstanding;
                result.Address1_StateOrProvince = account.Address1_StateOrProvince;
                result.Address1_Latitude = account.Address1_Latitude;
                result.ModifiedOn = account.ModifiedOn;
                result.Address2_Line3 = account.Address2_Line3;
                result.Address2_UTCOffset = account.Address2_UTCOffset;
                result.PreferredAppointmentDayCode.Value = account.PreferredAppointmentDayCode_Value;
                result.PreferredAppointmentTimeCode.Value = account.PreferredAppointmentTimeCode_Value;
                result.EMailAddress1 = account.EMailAddress1;
                result.Address2_StateOrProvince = account.Address2_StateOrProvince;
                result.Address1_Composite = account.Address1_Composite;
                result.IndustryCode.Value = account.IndustryCode_Value;
                result.Address1_Telephone3 = account.Address1_Telephone3;
                return result;
            }
            return null;
        }
    
        protected override void UpdateResult(object outerEntity, object innerResult)
        {
            global::LightSwitchApplication.Implementation.Account outerAccount = outerEntity as global::LightSwitchApplication.Implementation.Account;
            global::sjkpdev07ContextData.sjkpdev07ContextDataService.Account innerAccount = innerResult as global::sjkpdev07ContextData.sjkpdev07ContextDataService.Account;
            if ((outerAccount != null) && (innerAccount != null))
            {
                outerAccount.TerritoryCode_Value = innerAccount.TerritoryCode.Value;
                outerAccount.LastUsedInCampaign = innerAccount.LastUsedInCampaign;
                outerAccount.Address1_Name = innerAccount.Address1_Name;
                outerAccount.Address1_Telephone2 = innerAccount.Address1_Telephone2;
                outerAccount.OverriddenCreatedOn = innerAccount.OverriddenCreatedOn;
                outerAccount.EntityImageId = innerAccount.EntityImageId;
                outerAccount.OwnershipCode_Value = innerAccount.OwnershipCode.Value;
                outerAccount.PrimaryContactId_Id = innerAccount.PrimaryContactId.Id;
                outerAccount.PrimaryContactId_LogicalName = innerAccount.PrimaryContactId.LogicalName;
                outerAccount.PrimaryContactId_Name = innerAccount.PrimaryContactId.Name;
                outerAccount.CreditLimit_Value = innerAccount.CreditLimit.Value;
                outerAccount.EntityImage_URL = innerAccount.EntityImage_URL;
                outerAccount.TerritoryId_Id = innerAccount.TerritoryId.Id;
                outerAccount.TerritoryId_LogicalName = innerAccount.TerritoryId.LogicalName;
                outerAccount.TerritoryId_Name = innerAccount.TerritoryId.Name;
                outerAccount.EntityImage_Timestamp = innerAccount.EntityImage_Timestamp;
                outerAccount.Telephone3 = innerAccount.Telephone3;
                outerAccount.DoNotBulkPostalMail = innerAccount.DoNotBulkPostalMail;
                outerAccount.Address1_FreightTermsCode_Value = innerAccount.Address1_FreightTermsCode.Value;
                outerAccount.Address2_Line1 = innerAccount.Address2_Line1;
                outerAccount.EMailAddress2 = innerAccount.EMailAddress2;
                outerAccount.Address2_PrimaryContactName = innerAccount.Address2_PrimaryContactName;
                outerAccount.Telephone2 = innerAccount.Telephone2;
                outerAccount.TimeZoneRuleVersionNumber = innerAccount.TimeZoneRuleVersionNumber;
                outerAccount.OwningTeam_Id = innerAccount.OwningTeam.Id;
                outerAccount.OwningTeam_LogicalName = innerAccount.OwningTeam.LogicalName;
                outerAccount.OwningTeam_Name = innerAccount.OwningTeam.Name;
                outerAccount.ShippingMethodCode_Value = innerAccount.ShippingMethodCode.Value;
                outerAccount.Address1_AddressId = innerAccount.Address1_AddressId;
                outerAccount.Address2_Telephone1 = innerAccount.Address2_Telephone1;
                outerAccount.Address1_Fax = innerAccount.Address1_Fax;
                outerAccount.OwningBusinessUnit_Id = innerAccount.OwningBusinessUnit.Id;
                outerAccount.OwningBusinessUnit_LogicalName = innerAccount.OwningBusinessUnit.LogicalName;
                outerAccount.OwningBusinessUnit_Name = innerAccount.OwningBusinessUnit.Name;
                outerAccount.OwnerId_Id = innerAccount.OwnerId.Id;
                outerAccount.OwnerId_LogicalName = innerAccount.OwnerId.LogicalName;
                outerAccount.OwnerId_Name = innerAccount.OwnerId.Name;
                outerAccount.CreatedOnBehalfBy_Id = innerAccount.CreatedOnBehalfBy.Id;
                outerAccount.CreatedOnBehalfBy_LogicalName = innerAccount.CreatedOnBehalfBy.LogicalName;
                outerAccount.CreatedOnBehalfBy_Name = innerAccount.CreatedOnBehalfBy.Name;
                outerAccount.Address2_Latitude = innerAccount.Address2_Latitude;
                outerAccount.PreferredContactMethodCode_Value = innerAccount.PreferredContactMethodCode.Value;
                outerAccount.Address2_Composite = innerAccount.Address2_Composite;
                outerAccount.Aging90_Base_Value = innerAccount.Aging90_Base.Value;
                outerAccount.Address2_PostalCode = innerAccount.Address2_PostalCode;
                outerAccount.Merged = innerAccount.Merged;
                outerAccount.PaymentTermsCode_Value = innerAccount.PaymentTermsCode.Value;
                outerAccount.DoNotSendMM = innerAccount.DoNotSendMM;
                outerAccount.Address2_County = innerAccount.Address2_County;
                outerAccount.Aging30_Value = innerAccount.Aging30.Value;
                outerAccount.Address2_City = innerAccount.Address2_City;
                outerAccount.DoNotBulkEMail = innerAccount.DoNotBulkEMail;
                outerAccount.ImportSequenceNumber = innerAccount.ImportSequenceNumber;
                outerAccount.EMailAddress3 = innerAccount.EMailAddress3;
                outerAccount.Address1_City = innerAccount.Address1_City;
                outerAccount.WebSiteURL = innerAccount.WebSiteURL;
                outerAccount.Revenue_Value = innerAccount.Revenue.Value;
                outerAccount.TransactionCurrencyId_Id = innerAccount.TransactionCurrencyId.Id;
                outerAccount.TransactionCurrencyId_LogicalName = innerAccount.TransactionCurrencyId.LogicalName;
                outerAccount.TransactionCurrencyId_Name = innerAccount.TransactionCurrencyId.Name;
                outerAccount.Address1_ShippingMethodCode_Value = innerAccount.Address1_ShippingMethodCode.Value;
                outerAccount.Address1_PostOfficeBox = innerAccount.Address1_PostOfficeBox;
                outerAccount.Description = innerAccount.Description;
                outerAccount.TickerSymbol = innerAccount.TickerSymbol;
                outerAccount.Address2_Longitude = innerAccount.Address2_Longitude;
                outerAccount.SIC = innerAccount.SIC;
                outerAccount.Address1_County = innerAccount.Address1_County;
                outerAccount.OwningUser_Id = innerAccount.OwningUser.Id;
                outerAccount.OwningUser_LogicalName = innerAccount.OwningUser.LogicalName;
                outerAccount.OwningUser_Name = innerAccount.OwningUser.Name;
                outerAccount.Address2_AddressId = innerAccount.Address2_AddressId;
                outerAccount.CreditLimit_Base_Value = innerAccount.CreditLimit_Base.Value;
                outerAccount.PreferredSystemUserId_Id = innerAccount.PreferredSystemUserId.Id;
                outerAccount.PreferredSystemUserId_LogicalName = innerAccount.PreferredSystemUserId.LogicalName;
                outerAccount.PreferredSystemUserId_Name = innerAccount.PreferredSystemUserId.Name;
                outerAccount.MarketCap_Value = innerAccount.MarketCap.Value;
                outerAccount.Address1_PrimaryContactName = innerAccount.Address1_PrimaryContactName;
                outerAccount.DoNotPostalMail = innerAccount.DoNotPostalMail;
                outerAccount.AccountCategoryCode_Value = innerAccount.AccountCategoryCode.Value;
                outerAccount.StateCode_Value = innerAccount.StateCode.Value;
                outerAccount.Address2_Telephone3 = innerAccount.Address2_Telephone3;
                outerAccount.Address2_AddressTypeCode_Value = innerAccount.Address2_AddressTypeCode.Value;
                outerAccount.EntityImage = innerAccount.EntityImage;
                outerAccount.DoNotFax = innerAccount.DoNotFax;
                outerAccount.DefaultPriceLevelId_Id = innerAccount.DefaultPriceLevelId.Id;
                outerAccount.DefaultPriceLevelId_LogicalName = innerAccount.DefaultPriceLevelId.LogicalName;
                outerAccount.DefaultPriceLevelId_Name = innerAccount.DefaultPriceLevelId.Name;
                outerAccount.ParticipatesInWorkflow = innerAccount.ParticipatesInWorkflow;
                outerAccount.CustomerSizeCode_Value = innerAccount.CustomerSizeCode.Value;
                outerAccount.Address2_UPSZone = innerAccount.Address2_UPSZone;
                outerAccount.PreferredServiceId_Id = innerAccount.PreferredServiceId.Id;
                outerAccount.PreferredServiceId_LogicalName = innerAccount.PreferredServiceId.LogicalName;
                outerAccount.PreferredServiceId_Name = innerAccount.PreferredServiceId.Name;
                outerAccount.UTCConversionTimeZoneCode = innerAccount.UTCConversionTimeZoneCode;
                outerAccount.DoNotEMail = innerAccount.DoNotEMail;
                outerAccount.Aging60_Value = innerAccount.Aging60.Value;
                outerAccount.CustomerTypeCode_Value = innerAccount.CustomerTypeCode.Value;
                outerAccount.Telephone1 = innerAccount.Telephone1;
                outerAccount.CreatedBy_Id = innerAccount.CreatedBy.Id;
                outerAccount.CreatedBy_LogicalName = innerAccount.CreatedBy.LogicalName;
                outerAccount.CreatedBy_Name = innerAccount.CreatedBy.Name;
                outerAccount.Address2_Name = innerAccount.Address2_Name;
                outerAccount.ModifiedBy_Id = innerAccount.ModifiedBy.Id;
                outerAccount.ModifiedBy_LogicalName = innerAccount.ModifiedBy.LogicalName;
                outerAccount.ModifiedBy_Name = innerAccount.ModifiedBy.Name;
                outerAccount.Aging30_Base_Value = innerAccount.Aging30_Base.Value;
                outerAccount.YomiName = innerAccount.YomiName;
                outerAccount.Address2_Country = innerAccount.Address2_Country;
                outerAccount.Address2_Fax = innerAccount.Address2_Fax;
                outerAccount.Address1_UPSZone = innerAccount.Address1_UPSZone;
                outerAccount.Address1_PostalCode = innerAccount.Address1_PostalCode;
                outerAccount.Address1_Country = innerAccount.Address1_Country;
                outerAccount.NumberOfEmployees = innerAccount.NumberOfEmployees;
                outerAccount.Address2_FreightTermsCode_Value = innerAccount.Address2_FreightTermsCode.Value;
                outerAccount.AccountRatingCode_Value = innerAccount.AccountRatingCode.Value;
                outerAccount.FtpSiteURL = innerAccount.FtpSiteURL;
                outerAccount.Address1_Longitude = innerAccount.Address1_Longitude;
                outerAccount.AccountId = innerAccount.AccountId;
                outerAccount.OriginatingLeadId_Id = innerAccount.OriginatingLeadId.Id;
                outerAccount.OriginatingLeadId_LogicalName = innerAccount.OriginatingLeadId.LogicalName;
                outerAccount.OriginatingLeadId_Name = innerAccount.OriginatingLeadId.Name;
                outerAccount.Fax = innerAccount.Fax;
                outerAccount.CreditOnHold = innerAccount.CreditOnHold;
                outerAccount.Address1_Telephone1 = innerAccount.Address1_Telephone1;
                outerAccount.CreatedOn = innerAccount.CreatedOn;
                outerAccount.Name = innerAccount.Name;
                outerAccount.ExchangeRate = innerAccount.ExchangeRate;
                outerAccount.Address2_ShippingMethodCode_Value = innerAccount.Address2_ShippingMethodCode.Value;
                outerAccount.Address2_Line2 = innerAccount.Address2_Line2;
                outerAccount.VersionNumber = innerAccount.VersionNumber;
                outerAccount.AccountNumber = innerAccount.AccountNumber;
                outerAccount.Address1_Line1 = innerAccount.Address1_Line1;
                outerAccount.Revenue_Base_Value = innerAccount.Revenue_Base.Value;
                outerAccount.DoNotPhone = innerAccount.DoNotPhone;
                outerAccount.AccountClassificationCode_Value = innerAccount.AccountClassificationCode.Value;
                outerAccount.PreferredEquipmentId_Id = innerAccount.PreferredEquipmentId.Id;
                outerAccount.PreferredEquipmentId_LogicalName = innerAccount.PreferredEquipmentId.LogicalName;
                outerAccount.PreferredEquipmentId_Name = innerAccount.PreferredEquipmentId.Name;
                outerAccount.MarketCap_Base_Value = innerAccount.MarketCap_Base.Value;
                outerAccount.StageId = innerAccount.StageId;
                outerAccount.ProcessId = innerAccount.ProcessId;
                outerAccount.Address2_Telephone2 = innerAccount.Address2_Telephone2;
                outerAccount.Address1_AddressTypeCode_Value = innerAccount.Address1_AddressTypeCode.Value;
                outerAccount.Address1_UTCOffset = innerAccount.Address1_UTCOffset;
                outerAccount.ParentAccountId_Id = innerAccount.ParentAccountId.Id;
                outerAccount.ParentAccountId_LogicalName = innerAccount.ParentAccountId.LogicalName;
                outerAccount.ParentAccountId_Name = innerAccount.ParentAccountId.Name;
                outerAccount.Address1_Line2 = innerAccount.Address1_Line2;
                outerAccount.BusinessTypeCode_Value = innerAccount.BusinessTypeCode.Value;
                outerAccount.Aging60_Base_Value = innerAccount.Aging60_Base.Value;
                outerAccount.ModifiedOnBehalfBy_Id = innerAccount.ModifiedOnBehalfBy.Id;
                outerAccount.ModifiedOnBehalfBy_LogicalName = innerAccount.ModifiedOnBehalfBy.LogicalName;
                outerAccount.ModifiedOnBehalfBy_Name = innerAccount.ModifiedOnBehalfBy.Name;
                outerAccount.StockExchange = innerAccount.StockExchange;
                outerAccount.Address1_Line3 = innerAccount.Address1_Line3;
                outerAccount.MasterId_Id = innerAccount.MasterId.Id;
                outerAccount.MasterId_LogicalName = innerAccount.MasterId.LogicalName;
                outerAccount.MasterId_Name = innerAccount.MasterId.Name;
                outerAccount.Aging90_Value = innerAccount.Aging90.Value;
                outerAccount.StatusCode_Value = innerAccount.StatusCode.Value;
                outerAccount.Address2_PostOfficeBox = innerAccount.Address2_PostOfficeBox;
                outerAccount.SharesOutstanding = innerAccount.SharesOutstanding;
                outerAccount.Address1_StateOrProvince = innerAccount.Address1_StateOrProvince;
                outerAccount.Address1_Latitude = innerAccount.Address1_Latitude;
                outerAccount.ModifiedOn = innerAccount.ModifiedOn;
                outerAccount.Address2_Line3 = innerAccount.Address2_Line3;
                outerAccount.Address2_UTCOffset = innerAccount.Address2_UTCOffset;
                outerAccount.PreferredAppointmentDayCode_Value = innerAccount.PreferredAppointmentDayCode.Value;
                outerAccount.PreferredAppointmentTimeCode_Value = innerAccount.PreferredAppointmentTimeCode.Value;
                outerAccount.EMailAddress1 = innerAccount.EMailAddress1;
                outerAccount.Address2_StateOrProvince = innerAccount.Address2_StateOrProvince;
                outerAccount.Address1_Composite = innerAccount.Address1_Composite;
                outerAccount.IndustryCode_Value = innerAccount.IndustryCode.Value;
                outerAccount.Address1_Telephone3 = innerAccount.Address1_Telephone3;
                return;
            }
            base.UpdateResult(outerEntity, innerResult);
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.sjkpdev07ContextDataService))
            {
                return new global::LightSwitchApplication.sjkpdev07ContextDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.sjkpdev07ContextDataService))
            {
                return new global::LightSwitchApplication.Implementation.sjkpdev07ContextDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.Account) == definitionType)
            {
                return typeof(global::LightSwitchApplication.Implementation.Account);
            }
            return null;
        }
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.1.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Account :
        global::LightSwitchApplication.Account.DetailsClass.IImplementation,
        global::Microsoft.LightSwitch.Internal.IAstoriaEntityImplementation
    {
    
        [global::System.Runtime.Serialization.DataMember]
        public string Microsoft_LightSwitch_ETag
        {
            get;
            set;
        }
    
        string global::Microsoft.LightSwitch.Internal.IAstoriaEntityImplementation.ETag
        {
            get { return this.Microsoft_LightSwitch_ETag; }
            set { this.Microsoft_LightSwitch_ETag = value; }
        }
    
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Account.DetailsClass.IImplementation.Referencingaccount_master_account
        {
            get
            {
                return this.Referencingaccount_master_account;
            }
            set
            {
                this.Referencingaccount_master_account = (global::LightSwitchApplication.Implementation.Account)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Referencingaccount_master_account");
                }
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Account.DetailsClass.IImplementation.Referencedaccount_master_account
        {
            get
            {
                return this.Referencedaccount_master_account;
            }
        }
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementation global::LightSwitchApplication.Account.DetailsClass.IImplementation.Referencingaccount_parent_account
        {
            get
            {
                return this.Referencingaccount_parent_account;
            }
            set
            {
                this.Referencingaccount_parent_account = (global::LightSwitchApplication.Implementation.Account)value;
                if (this.__host != null)
                {
                    this.__host.RaisePropertyChanged("Referencingaccount_parent_account");
                }
            }
        }
        
        global::System.Collections.IEnumerable global::LightSwitchApplication.Account.DetailsClass.IImplementation.Referencedaccount_parent_account
        {
            get
            {
                return this.Referencedaccount_parent_account;
            }
        }
        
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

